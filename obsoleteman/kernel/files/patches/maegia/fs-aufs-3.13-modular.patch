
 fs/aufs/Kconfig          |    2 +-
 fs/inode.c               |    2 ++
 fs/namespace.c           |    2 ++
 fs/notify/group.c        |    4 ++++
 fs/notify/mark.c         |    4 ++++
 fs/open.c                |    1 +
 fs/splice.c              |    2 ++
 security/commoncap.c     |    2 ++
 security/device_cgroup.c |    2 ++
 security/security.c      |   10 ++++++++++
 10 files changed, 30 insertions(+), 1 deletion(-)

diff -Nurp linux-3.13.6-aufs/fs/aufs/Kconfig linux-3.13.6-aufs-modular/fs/aufs/Kconfig
--- linux-3.13.6-aufs/fs/aufs/Kconfig	2014-03-07 23:55:11.573113524 +0200
+++ linux-3.13.6-aufs-modular/fs/aufs/Kconfig	2014-03-08 18:43:52.774223151 +0200
@@ -1,5 +1,5 @@
 config AUFS_FS
-	bool "Aufs (Advanced multi layered unification filesystem) support"
+	tristate "Aufs (Advanced multi layered unification filesystem) support"
 	help
 	Aufs is a stackable unification filesystem such as Unionfs,
 	which unifies several directories and provides a merged single
diff -Nurp linux-3.13.6-aufs/fs/inode.c linux-3.13.6-aufs-modular/fs/inode.c
--- linux-3.13.6-aufs/fs/inode.c	2014-03-07 23:55:11.599113825 +0200
+++ linux-3.13.6-aufs-modular/fs/inode.c	2014-03-08 18:43:45.822128918 +0200
@@ -57,6 +57,7 @@ static struct hlist_head *inode_hashtabl
 static __cacheline_aligned_in_smp DEFINE_SPINLOCK(inode_hash_lock);
 
 __cacheline_aligned_in_smp DEFINE_SPINLOCK(inode_sb_list_lock);
+EXPORT_SYMBOL(inode_sb_list_lock);
 
 /*
  * Empty aops. Can be used for the cases where the user does not
@@ -1513,6 +1514,7 @@ int update_time(struct inode *inode, str
 	mark_inode_dirty_sync(inode);
 	return 0;
 }
+EXPORT_SYMBOL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -Nurp linux-3.13.6-aufs/fs/namespace.c linux-3.13.6-aufs-modular/fs/namespace.c
--- linux-3.13.6-aufs/fs/namespace.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/fs/namespace.c	2014-03-08 18:43:45.823128931 +0200
@@ -425,6 +425,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -1509,6 +1510,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL(iterate_mounts);
 
 static void cleanup_group_ids(struct mount *mnt, struct mount *end)
 {
diff -Nurp linux-3.13.6-aufs/fs/notify/group.c linux-3.13.6-aufs-modular/fs/notify/group.c
--- linux-3.13.6-aufs/fs/notify/group.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/fs/notify/group.c	2014-03-08 18:43:45.824128945 +0200
@@ -22,6 +22,7 @@
 #include <linux/srcu.h>
 #include <linux/rculist.h>
 #include <linux/wait.h>
+#include <linux/module.h>
 
 #include <linux/fsnotify_backend.h>
 #include "fsnotify.h"
@@ -65,6 +66,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	atomic_inc(&group->refcnt);
 }
+EXPORT_SYMBOL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
@@ -74,6 +76,7 @@ void fsnotify_put_group(struct fsnotify_
 	if (atomic_dec_and_test(&group->refcnt))
 		fsnotify_final_destroy_group(group);
 }
+EXPORT_SYMBOL(fsnotify_put_group);
 
 /*
  * Create a new fsnotify_group and hold a reference for the group returned.
@@ -102,6 +105,7 @@ struct fsnotify_group *fsnotify_alloc_gr
 
 	return group;
 }
+EXPORT_SYMBOL(fsnotify_alloc_group);
 
 int fsnotify_fasync(int fd, struct file *file, int on)
 {
diff -Nurp linux-3.13.6-aufs/fs/notify/mark.c linux-3.13.6-aufs-modular/fs/notify/mark.c
--- linux-3.13.6-aufs/fs/notify/mark.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/fs/notify/mark.c	2014-03-08 18:43:45.824128945 +0200
@@ -109,6 +109,7 @@ void fsnotify_put_mark(struct fsnotify_m
 		mark->free_mark(mark);
 	}
 }
+EXPORT_SYMBOL(fsnotify_put_mark);
 
 /*
  * Any time a mark is getting freed we end up here.
@@ -191,6 +192,7 @@ void fsnotify_destroy_mark(struct fsnoti
 	fsnotify_destroy_mark_locked(mark, group);
 	mutex_unlock(&group->mark_mutex);
 }
+EXPORT_SYMBOL(fsnotify_destroy_mark);
 
 void fsnotify_set_mark_mask_locked(struct fsnotify_mark *mark, __u32 mask)
 {
@@ -275,6 +277,7 @@ err:
 
 	return ret;
 }
+EXPORT_SYMBOL(fsnotify_add_mark);
 
 int fsnotify_add_mark(struct fsnotify_mark *mark, struct fsnotify_group *group,
 		      struct inode *inode, struct vfsmount *mnt, int allow_dups)
@@ -336,6 +339,7 @@ void fsnotify_init_mark(struct fsnotify_
 	atomic_set(&mark->refcnt, 1);
 	mark->free_mark = free_mark;
 }
+EXPORT_SYMBOL(fsnotify_init_mark);
 
 static int fsnotify_mark_destroy(void *ignored)
 {
diff -Nurp linux-3.13.6-aufs/fs/open.c linux-3.13.6-aufs-modular/fs/open.c
--- linux-3.13.6-aufs/fs/open.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/fs/open.c	2014-03-08 18:43:45.825128958 +0200
@@ -62,6 +62,7 @@ int do_truncate(struct dentry *dentry, l
 	mutex_unlock(&dentry->d_inode->i_mutex);
 	return ret;
 }
+EXPORT_SYMBOL(do_truncate);
 
 long vfs_truncate(struct path *path, loff_t length)
 {
diff -Nurp linux-3.13.6-aufs/fs/splice.c linux-3.13.6-aufs-modular/fs/splice.c
--- linux-3.13.6-aufs/fs/splice.c	2014-03-07 23:55:11.600113837 +0200
+++ linux-3.13.6-aufs-modular/fs/splice.c	2014-03-08 18:43:45.825128958 +0200
@@ -1124,6 +1124,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -1150,6 +1151,7 @@ long do_splice_to(struct file *in, loff_
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -Nurp linux-3.13.6-aufs/security/commoncap.c linux-3.13.6-aufs-modular/security/commoncap.c
--- linux-3.13.6-aufs/security/commoncap.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/security/commoncap.c	2014-03-08 18:43:45.826128972 +0200
@@ -988,9 +988,11 @@ int cap_mmap_addr(unsigned long addr)
 	}
 	return ret;
 }
+EXPORT_SYMBOL(cap_mmap_addr);
 
 int cap_mmap_file(struct file *file, unsigned long reqprot,
 		  unsigned long prot, unsigned long flags)
 {
 	return 0;
 }
+EXPORT_SYMBOL(cap_mmap_file);
diff -Nurp linux-3.13.6-aufs/security/device_cgroup.c linux-3.13.6-aufs-modular/security/device_cgroup.c
--- linux-3.13.6-aufs/security/device_cgroup.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/security/device_cgroup.c	2014-03-08 18:43:45.827128986 +0200
@@ -7,6 +7,7 @@
 #include <linux/device_cgroup.h>
 #include <linux/cgroup.h>
 #include <linux/ctype.h>
+#include <linux/export.h>
 #include <linux/list.h>
 #include <linux/uaccess.h>
 #include <linux/seq_file.h>
@@ -745,6 +746,7 @@ int __devcgroup_inode_permission(struct
 	return __devcgroup_check_permission(type, imajor(inode), iminor(inode),
 			access);
 }
+EXPORT_SYMBOL(__devcgroup_inode_permission);
 
 int devcgroup_inode_mknod(int mode, dev_t dev)
 {
diff -Nurp linux-3.13.6-aufs/security/security.c linux-3.13.6-aufs-modular/security/security.c
--- linux-3.13.6-aufs/security/security.c	2014-01-20 04:40:07.000000000 +0200
+++ linux-3.13.6-aufs-modular/security/security.c	2014-03-08 18:43:45.827128986 +0200
@@ -407,6 +407,7 @@ int security_path_rmdir(struct path *dir
 		return 0;
 	return security_ops->path_rmdir(dir, dentry);
 }
+EXPORT_SYMBOL(security_path_rmdir);
 
 int security_path_unlink(struct path *dir, struct dentry *dentry)
 {
@@ -423,6 +424,7 @@ int security_path_symlink(struct path *d
 		return 0;
 	return security_ops->path_symlink(dir, dentry, old_name);
 }
+EXPORT_SYMBOL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -431,6 +433,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return security_ops->path_link(old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL(security_path_link);
 
 int security_path_rename(struct path *old_dir, struct dentry *old_dentry,
 			 struct path *new_dir, struct dentry *new_dentry)
@@ -449,6 +452,7 @@ int security_path_truncate(struct path *
 		return 0;
 	return security_ops->path_truncate(path);
 }
+EXPORT_SYMBOL(security_path_truncate);
 
 int security_path_chmod(struct path *path, umode_t mode)
 {
@@ -456,6 +460,7 @@ int security_path_chmod(struct path *pat
 		return 0;
 	return security_ops->path_chmod(path, mode);
 }
+EXPORT_SYMBOL(security_path_chmod);
 
 int security_path_chown(struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -463,6 +468,7 @@ int security_path_chown(struct path *pat
 		return 0;
 	return security_ops->path_chown(path, uid, gid);
 }
+EXPORT_SYMBOL(security_path_chown);
 
 int security_path_chroot(struct path *path)
 {
@@ -539,6 +545,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return security_ops->inode_readlink(dentry);
 }
+EXPORT_SYMBOL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd)
 {
@@ -553,6 +560,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return security_ops->inode_permission(inode, mask);
 }
+EXPORT_SYMBOL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -675,6 +683,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
@@ -735,6 +744,7 @@ int security_mmap_file(struct file *file
 		return ret;
 	return ima_file_mmap(file, prot);
 }
+EXPORT_SYMBOL(security_mmap_file);
 
 int security_mmap_addr(unsigned long addr)
 {
